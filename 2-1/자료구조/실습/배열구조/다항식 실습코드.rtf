{\rtf1\ansi\ansicpg949\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh14460\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <stdlib.h>\
\
#define N 10 //
\f1 \'b1\'e2\'c8\'a3
\f0  
\f1 \'bb\'f3\'bc\'f6
\f0 \
\
typedef struct Poly\
\{\
    int degree;\
    int coef[N];\
\}Poly;\
\
Poly addPoly(Poly A, Poly B)\
\{\
    Poly C;\
    int Apos = 0, Bpos = 0, Cpos = 0;\
    \
    int Adeg = A.degree;\
    int Bdeg = B.degree;\
    \
    C.degree = (Adeg >= Bdeg) ? Adeg : Bdeg;\
    \
    while(Apos <= A.degree && Bpos <= B.degree)\
    \{\
        if(Adeg > Bdeg)\
        \{\
            C.coef[Cpos] = A.coef[Apos];\
            Apos++;  Cpos++;  Adeg--;\
        \}\
        else if(Adeg == Bdeg)\
        \{\
            C.coef[Cpos] = A.coef[Apos] + B.coef[Bpos]; \
            Apos++; Bpos++; Cpos++; Adeg--; Bdeg--;\
        \}\
        else\
        \{\
            C.coef[Cpos] = B.coef[Bpos];\
            Bpos++;  Cpos++;  Bdeg--;\
        \}\
    \}\
    return C;\
\}\
\
void printPoly(Poly P)\
\{\
    int i, j;\
    for(i = 0, j = P.degree; i <= P.degree; i++, j--)\
        printf("%2dx^%d +", P.coef[i], j);\
    printf("\\b\\b  \\n");    \
\}\
\
int main()\
\{\
    Poly a, b, c;\
    scanf("%d %d", &a.degree, &b.degree);\
    \
    for(int i = 0; i <= a.degree; i++)\
        scanf("%d", &a.coef[i]);\
        \
    for(int i = 0; i <= b.degree; i++)\
        scanf("%d", &b.coef[i]);   \
        \
    printPoly(a);\
    printPoly(b);\
    \
    c = addPoly(a, b);\
    printf("==========================\\n");\
    printPoly(c);\
    \
    return 0;\
\}\
\
///////////////////////////////////////\
\
#include <stdio.h>\
#include <stdlib.h>\
\
#define N 20 //\uc0\u44592 \u54840  \u49345 \u49688 \
\
typedef struct Poly\
\{\
    int coef;\
    int expon;\
\}Poly;\
\
Poly terms[N] = \{\{8, 3\}, \{7, 1\}, \{1, 0\}, \{10, 3\}, \{3, 2\}, \{1, 0\}\};\
int avail = 6;\
\
char compare(int exponA, int exponB)\
\{\
    if(exponA > exponB)\
        return '>';\
    else if(exponA == exponB)\
        return '=';\
    else\
        return '<';\
\}\
\
void attatch(int coef, int expon)\
\{\
    terms[avail].coef = coef;\
    terms[avail].expon = expon;\
    avail++;\
\}\
\
void add(int As, int Ae, int Bs, int Be, int Cs, int *Ce)\
\{\
    while(As <= Ae && Bs <= Be)\
    \{\
        switch(compare(terms[As].expon, terms[Bs].expon))\
        \{\
            case '>':\
                attatch(terms[As].coef, terms[As].expon);\
                As++;\
                break;\
                \
            case '=':\
                int tempCoef = terms[As].coef + terms[Bs].coef;\
                if(tempCoef != 0)\
                    attatch(tempCoef, terms[As].expon);\
                    As++;  Bs++;\
                break;\
                \
            case '<':\
                attatch(terms[Bs].coef, terms[Bs].expon);\
                Bs++;\
                break;\
        \}\
    \}\
    \
    for(; As <= Ae; As++)\
        attatch(terms[As].coef, terms[As].expon);\
    for(; Bs <= Be; Bs++)\
        attatch(terms[Bs].coef, terms[Bs].expon);    \
        \
    *Ce = avail - 1;    \
\}\
\
void printPoly(int s, int e)\
\{\
    for(int i = s; i <= e; i++)\
        printf("%2dx^%d +", terms[i].coef, terms[i].expon);\
    printf("\\b\\b  \\n");    \
\}\
\
int main()\
\{\
    int As = 0, Ae = 2, Bs = 3, Be = 5, Cs = avail, Ce;\
    printPoly(As, Ae);\
    printPoly(Bs, Be);\
    \
    add(As, Ae, Bs, Be, Cs, &Ce);\
    printf("=========================\\n");\
    printPoly(Cs, Ce);\
    \
    return 0;\
\}\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}